import org.jooq.meta.jaxb.*

buildscript {
	ext {
		jooqVersion = '3.19.15'
	}
}

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'

	id 'dev.monosoul.jooq-docker' version '6.1.9'
}

group = 'kr.co.amateurs'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "src/generated"]
        }
    }
}

jooq {
    version = "${jooqVersion}"

    withContainer {
        image {
            name = "mysql:8.0.41"
            envVars = [
                    MYSQL_ROOT_PASSWORD: "passwd",
                    MYSQL_DATABASE     : "amateurs_db"
            ]
        }

        db {
            username = "root"
            password = "passwd"
            name = "amateurs_db"
            port = 3306
            jdbc {
                schema = "jdbc:mysql"
                driverClassName = "com.mysql.cj.jdbc.Driver"
            }
        }
    }
}

tasks {
    generateJooqClasses {
        schemas.set(["amateurs_db"])
        outputDirectory.set(project.layout.projectDirectory.dir("src/generated"))
        includeFlywayTable.set(false)

        usingJavaConfig {
            generate = new Generate()
                    .withJavaTimeTypes(true)
                    .withDeprecated(false)
                    .withDaos(false)
                    .withFluentSetters(true)
                    .withRecords(true)
                    .withPojos(true)
                    .withSpringAnnotations(true)
                    .withValidationAnnotations(true)

            database.withForcedTypes(
                    new ForcedType()
                            .withUserType("java.lang.Long")
                            .withTypes("int unsigned"),
                    new ForcedType()
                            .withUserType("java.lang.Integer")
                            .withTypes("tinyint unsigned"),
                    new ForcedType()
                            .withUserType("java.lang.Integer")
                            .withTypes("smallint unsigned"),
                    new ForcedType()
                            .withUserType("java.lang.Boolean")
                            .withTypes("tinyint\\(1\\)")
            )
        }
    }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

	// JWT 관련 의존성
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

	// OAuth2 관련 의존성
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.0'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	//AI
	implementation 'dev.langchain4j:langchain4j:1.0.0-alpha1'
	implementation 'dev.langchain4j:langchain4j-google-ai-gemini:1.0.0-alpha1'
	implementation 'dev.langchain4j:langchain4j-spring-boot-starter:1.0.0-alpha1'
	implementation 'dev.langchain4j:langchain4j-open-ai:1.0.0-alpha1'
	implementation 'dev.langchain4j:langchain4j-qdrant:1.0.0-alpha1'

    // AWS S3 관련 의존성
    implementation 'software.amazon.awssdk:s3:2.31.68'
    implementation 'software.amazon.awssdk:auth:2.31.68'

    implementation "org.jooq:jooq:${jooqVersion}"
    implementation('org.springframework.boot:spring-boot-starter-jooq') {
        exclude group: 'org.jooq'
    }

    jooqCodegen "org.jooq:jooq:${jooqVersion}"
    jooqCodegen "org.jooq:jooq-meta:${jooqVersion}"
    jooqCodegen "org.jooq:jooq-codegen:${jooqVersion}"
    jooqCodegen 'com.mysql:mysql-connector-j'
    jooqCodegen 'org.flywaydb:flyway-core'
    jooqCodegen 'org.flywaydb:flyway-mysql'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'com.h2database:h2'
	testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo.spring3x:4.20.0'
	testImplementation 'com.github.codemonstur:embedded-redis:1.4.3'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	testImplementation 'org.springframework.boot:spring-boot-starter-websocket'
	testImplementation 'org.springframework:spring-messaging'
	testImplementation 'org.springframework:spring-websocket'
	testImplementation 'io.rest-assured:rest-assured:5.5.5'
	testImplementation 'io.rest-assured:json-path:5.3.2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	testImplementation 'org.testcontainers:testcontainers'
	testImplementation 'org.testcontainers:mysql'
	testImplementation 'org.testcontainers:junit-jupiter'

	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.awaitility:awaitility:4.2.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named('compileJava') {
	options.encoding = 'UTF-8'
	if (!System.getenv('DOCKER_BUILD')) {
		dependsOn('generateJooqClasses')
	}
}

clean {
	delete "src/generated"
}